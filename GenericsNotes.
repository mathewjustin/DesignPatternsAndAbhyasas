# Java Generics - Simplified Notes

Generics in Java allow for parameterized types, enabling classes, interfaces, and methods to be used with different data types while ensuring compile-time type safety and reducing the need for type casts. Here's a simplified breakdown:

### Basics of Generics

- **Type Safety:** Generics enforce type safety by ensuring that you only insert and retrieve objects of a predefined type.
  
- **Code Reuse:** With generics, you can write a method/class/interface once and use it for any type of object.

- **Type Erasure:** Java implements generics through type erasure to maintain backward compatibility with older versions. This means the generic type information is not available at runtime; instead, all generic types are converted to their raw types.

### Syntax Example:

```java
public abstract class Enum<E extends Enum<E>> implements Comparable<E> {
    // Class body
}
```

### Type Erasure Example:

- **Type Erasure:** In the bytecode, the generic type `E` is replaced with its raw type, maintaining compatibility but losing specific type information at runtime.

### Subtyping and Generics:

- **Arrays and Generics:** While you can assign an array of a subtype (e.g., `Integer[]`) to an array of its supertype (e.g., `Number[]`), this does not work with generic collections due to type safety.
  
  ```java
  Number[] nums = new Integer[10]; // Compiles because arrays are covariant
  
  List<Number> numbers = new ArrayList<Integer>(); // Does not compile because generics are invariant
  ```

- **Wildcard with extends:** To allow a collection of a subtype, use the `? extends` wildcard:

  ```java
  List<? extends Number> list = new ArrayList<Integer>(); // This works
  ```

### Generics and Methods:

- **Restrictions with extends:** When you use `? extends T`, you cannot add to the collection because the exact type is unknown:

  ```java
  List<? extends Number> list = new ArrayList<Integer>();
  list.add(4); // Compile-time error
  ```

- **Using super:** If you need to insert into a collection, use `? super T`. This allows the collection to accept the type and its supertypes:

  ```java
  List<? super Integer> list = new ArrayList<Integer>();
  list.add(4); // This works
  ```

### Generic Methods:

- **Get and Put Principle:** Generally, use `? extends T` when you only want to get items from a collection, and `? super T` when you want to put items into a collection.

- **Example:**

  ```java
  public <T> void copy(List<? super T> dest, List<? extends T> src) {
      // Method body
  }
  ```

### Type Parameters:

- **Using T:** When defining generic types, you can use `T` to represent an unknown type. However, you cannot use `super` with `T`; only `extends` is allowed.

- **Bounds:** `T` can be bounded to a particular type using `extends`. This restricts `T` to being an instance of the specified type or its subclasses.

### Advanced Concepts:

- **Erasure Rules:**
  1. All type parameters are removed during compilation.
  2. Type variables are replaced by their bounds, or `Object` if unbounded.
  3. In multiple bounds, the erasure is the erasure of the leftmost bound.

- **Edge Cases:**
  - Using `instanceof` with parameterized types is not allowed because of type erasure.
  - Parameterized types cannot be used in catch blocks for the same reason.

### Examples:

- **Tuple Class:**

  ```java
  public class Tuple<T, U> {
      T first;
      U second;

      public Tuple(T first, U second) {
          this.first = first;
          this.second = second;
      }
  }
  ```

- **User Class with Generics:**

  ```java
  public class User<T> {
      int id;
      T value;
      static int count;

      public User(T value) {
          this.value = value;
          count++;
      }

      public static int getCount() {
          return count;
      }
  }
  ```

### Conclusion

Generics enhance Java's type system by allowing more flexible and safer code. Understanding their usage, limitations, and workarounds like wildcards, type erasure, and bounds is key to leveraging their full potential.
